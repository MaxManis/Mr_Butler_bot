# - *- coding: utf- 8 - *-
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram import Bot, types

from aiogram.utils.markdown import hbold, hunderline, hcode, hlink

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext

import config_files.dicts as dicts
import config_files.config as config
from config_files.my_states import TryMySets, WriteToOper, TasksToDo, WriteToUser, GoogTextTS, SportEvents

import functions.tasks_list as tasks_list
import functions.news_scraper as news_scraper
import functions.weather as weather
import functions.chatbot_talk as chatbot_talk
import functions.exchange_rate as exchange_rate
import functions.sqlite_db as sqlite_db
import functions.text_recognition as text_recognition
import functions.blackjack as blackjack
import functions.interesting_api as interesting_api
import functions.hotline as hotline
import functions.speech_recog as speech_recog
import functions.sport_events as sport_events

import random
import time
import json

bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

oper_id = config.oper_id
secret = config.secret

# bot.remove_webhook()
# sleep(1)
# bot.set_webhook(url=f"https://boston88.pythonanywhere.com/{secret}"


@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    joined_users = sqlite_db.txt_db_set()
    print(joined_users)
    tasks_list.create_tasks_file(message.from_user.id)
    new_user_id = message.from_user.id
    check = sqlite_db.sql_check(new_user_id)

    if check is True:
        user_name = message.from_user.first_name
        await bot.send_sticker(message.chat.id, sqlite_db.open_sticker(5))
        await bot.send_message(message.from_user.id, f'Hello {user_name}!', reply_markup=dicts.start_but())
    elif check is False:
        # adding user id to txt db for msg sending
        sqlite_db.txt_db_add(joined_users, message.chat.id)
        # Share contact
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="üì≤–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–ºüì≤", request_contact=True)
        keyboard.add(button_phone)
        await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∫–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!'
                                                     '\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.', reply_markup=keyboard)


@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message):
    if message.contact is not None:  # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç contact –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é
        res = sqlite_db.add_user(message)
        await bot.send_message(message.chat.id, f"üöπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ {res}")
        await bot.send_sticker(message.chat.id, sqlite_db.open_sticker(16))
        await start_command(message)
    else:
        await bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await start_command(message)


@dp.message_handler(commands="admin")
async def help_command(message: types.Message):
    if str(message.from_user.id) in config.allowed_admin_users:
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏!\n"
                                                "/to_user - –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    else:
        await bot.send_message(message.chat.id, "–ê—è-—è–π, —Ç–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!")


@dp.message_handler(commands="help")
async def help_command(message: types.Message):
    await bot.send_message(message.chat.id, "–ü–æ–º–æ—â—å...")


@dp.message_handler(commands="to_user", state='*')
async def to_user_command(message: types.Message):
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø–∏—à–µ–º")
    await WriteToUser.write_1.set()


@dp.message_handler(state=WriteToUser.write_1)
async def to_user_command_1(message: types.Message, state: FSMContext):
    ans = message.text
    await bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ans}")
    await state.update_data(user_id=ans)
    await WriteToUser.write_2.set()


@dp.message_handler(state=WriteToUser.write_2)
async def to_user_command_2(message: types.Message, state: FSMContext):
    ans = message.text
    try:
        user_id = await state.get_data('user_id')
        await bot.send_message(user_id['user_id'], f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞: \n{ans}")
    except:
        await bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
    await state.finish()


@dp.message_handler(content_types=[types.ContentType.VOICE])
async def voice_message_handler(message: types.Message):
    await bot.send_sticker(message.chat.id, sqlite_db.open_sticker(9))
    await bot.send_message(message.from_user.id, hcode('üïì–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —è —Å–ª—É—à–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ!'), parse_mode=types.ParseMode.HTML)
    file_path = f'{config.voice_rec_path}OGG_file-{message.chat.id}-{random.randint(146, 24357)}.ogg'
    await message.voice.download(file_path)  # .get_file()
    res = speech_recog.speech_rec(file_path, message.chat.id)
    await bot.send_message(message.from_user.id, hcode('üîä–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:'), parse_mode=types.ParseMode.HTML)
    await bot.send_message(message.from_user.id, res)


@dp.message_handler(Text(equals="GTTS"))
async def get_gtts(message: types.Message):
    res = interesting_api.google_text_to_speech(message.from_user.id)
    await bot.send_voice(message.from_user.id, open(res, "rb"))
    interesting_api.del_file_by_path(res)


@dp.message_handler(commands="sport", state='*')
async def get_sport(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞!', reply_markup=dicts.buttons_keyboard(dicts.all_sports))
    await SportEvents.sport_1.set()


@dp.message_handler(state=SportEvents.sport_1)
async def get_sport(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª–∞—Ü–∞—é –∫–∞–Ω–∞–ª—ã...")
    sport_type = message.text
    print(sport_type)
    res = sport_events.parse_sport_by_type(sport_type, message.from_user.id)
    with open(res, 'r', encoding='utf-8') as json_file:
        json_object = json.load(json_file)
        json_file.close()
    leagues = []
    for i in json_object:
        leagues.append(i)
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –ª–∏–≥—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.", parse_mode=types.ParseMode.HTML,
                           reply_markup=dicts.buttons_keyboard(leagues))
    await state.update_data(sport_type=sport_type)
    await SportEvents.sport_2.set()


@dp.message_handler(state=SportEvents.sport_2)
async def get_sport(message: types.Message, state: FSMContext):
    ans = message.text
    await state.update_data(sport_league=ans)
    with open(f'{config.sport_json_path}json_sport_data-{str(message.from_user.id)}.json', 'r', encoding='utf-8') as json_file:
        json_object = json.load(json_file)
        json_file.close()
    mess = f'<b>{ans}:</b>\n'
    for y in json_object[ans]:
        print(y)
        if y["time"] != 'No data':
            mess += f'{y["team1"]} vs {y["team2"]} at {y["time"]}\n'
        else:
            mess += f'{y["team1"]} vs {y["team2"]} today!\n'
    await bot.send_message(message.from_user.id, mess, parse_mode=types.ParseMode.HTML,
                           reply_markup=dicts.start_but())
    await state.finish()


@dp.message_handler(Text(equals="üí∏–ü–æ–∏—Å–∫ –Ω–∞ HotLine"), state=None)
async def get_state_1(message: types.Message):
    await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.')
    await TryMySets.set_1.set()


@dp.message_handler(state=TryMySets.set_1)
async def get_state_2(message: types.Message, state: FSMContext):
    if "@" in message.text:
        await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
        return
    ans = message.text
    res = hotline.get_products(ans)
    i = 0
    for p in range(1, 6):
        all_info = res[i]
        if all_info['item_info'] == 'None':
            await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å!\n'
                                                         '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            break
        prod = f"{hbold(all_info['item_info'])}\n" \
               f"{hlink(all_info['item_price'], all_info['item_pic'])}\n" \
               f"{all_info['price_a_b']}\n" \
               f"{all_info['item_specs']}\n" \
               f"{hlink('READ MORE', all_info['item_url'])}"
        await bot.send_message(message.from_user.id, prod, parse_mode=types.ParseMode.HTML)
        i += 1
    await state.update_data(answer_1=ans)
    await state.finish()


@dp.message_handler(Text(equals="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á—å"))
async def start_tasks_to(message: types.Message):
    buttons = ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"]
    await bot.send_message(message.from_user.id, '–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏!', reply_markup=dicts.buttons_keyboard(buttons))
    await TasksToDo.task_1.set()


@dp.message_handler(Text(equals=["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"]), state=None)
async def start_tasks_to(message: types.Message):
    ans = message.text
    if ans == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏ –º—ã –µ–µ –¥–æ–±–∞–≤–∏–º!')
        await TasksToDo.task_1.set()
    elif ans == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏":
        content = tasks_list.read_tasks(message.from_user.id)
        count_tasks = len(content)
        res = f'<b>–í–°–ï–ì–û –ó–ê–î–ê–ß–¨ - {count_tasks}:</b>\n'
        for i in content:
            res += i + '\n'
        await bot.send_message(message.from_user.id, res, parse_mode=types.ParseMode.HTML, reply_markup=dicts.start_but())
    elif ans == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!')
        await TasksToDo.task_2.set()


@dp.message_handler(state=TasksToDo.task_1)
async def start_tasks_to_1(message: types.Message, state: FSMContext):
    ans1 = message.text
    tasks_list.create_task(ans1, message.from_user.id)
    await state.update_data(answer_1=ans1)
    await bot.send_message(message.from_user.id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=dicts.start_but())
    await state.reset_state()


@dp.message_handler(state=TasksToDo.task_2)
async def start_tasks_to_2(message: types.Message, state: FSMContext):
    count_tasks = len(tasks_list.read_tasks(message.from_user.id))
    if count_tasks == 0 or message.text == 0:
        return
    ans2 = message.text
    try:
        if int(ans2) > count_tasks:
            return
        tasks_list.del_tasks(ans2, message.from_user.id)
    except:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É!", reply_markup=dicts.start_but())
        return
    await bot.send_message(message.from_user.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=dicts.start_but())
    await state.update_data(answer_2=ans2)
    await state.finish()


@dp.message_handler(Text(equals="–ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞"), state='*')
async def write_to_oper_start(message: types.Message):
    sti = open(config.sticker_path + 'AnimatedSticker11.tgs', 'rb')
    await bot.send_sticker(message.chat.id, sti)
    await bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!?\n–ù–∞–ø–∏—Å—à–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞!')
    await WriteToOper.write_1.set()


@dp.message_handler(state=WriteToOper.write_1)
async def write_to_oper(message: types.Message, state: FSMContext):
    ans = message.text
    await bot.send_message(message.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!')
    await bot.send_message(config.oper_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n' + ans)
    await state.update_data(answer_1=ans)
    await state.finish()


@dp.message_handler(Text(equals="ü™®–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞"))
async def stone_start(message: types.Message):
    buttons = ["ü™®–ö–∞–º–µ–Ω—å", "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã", "üìÑ–ë—É–º–∞–≥–∞"]
    await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º!\n–î–µ–ª–∞–π —Å–≤–æ–π –≤—ã–±–æ—Ä!\n–†–∞–∑...–î–≤–∞...–¢—Ä–∏...',
                           reply_markup=dicts.buttons_keyboard(buttons))


@dp.message_handler(Text(equals=["ü™®–ö–∞–º–µ–Ω—å", "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã", "üìÑ–ë—É–º–∞–≥–∞"]))
async def stone_result(message: types.Message):
    ai = interesting_api.stone_paper()
    await bot.send_message(message.from_user.id, ai)
    player = message.text
    res = interesting_api.stone_paper_fight(ai, player)
    await bot.send_message(message.from_user.id, res, reply_markup=dicts.start_but())


@dp.message_handler(Text(equals="ü•≤–ù–µ—Å–º–µ—à–Ω—ã–µ —à—É—Ç–∫–∏"))
async def get_joke(message: types.Message):
    await bot.send_message(message.from_user.id, interesting_api.daddy_jokes())


@dp.message_handler(Text(equals="üëΩRick and Morty"))
async def get_rick_morty(message: types.Message):
    await bot.send_message(message.from_user.id, interesting_api.get_morty(), parse_mode=types.ParseMode.HTML)


@dp.message_handler(Text(equals="‚úíÔ∏è–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"))
async def start_text_recognition(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n'
                                                 '–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ)')


@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message):
    await bot.send_sticker(message.chat.id, sqlite_db.open_sticker(5))
    await bot.send_message(message.from_user.id, hcode('üïì–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —è —á–∏—Ç–∞—é —Ç–µ–∫—Å—Ç!'), parse_mode=types.ParseMode.HTML)
    file_path = f'{config.text_rec_path}JPG-file-{message.chat.id}-{random.randint(165, 43267)}.jpg'
    await message.photo[-1].download(file_path)
    res = text_recognition.text_rec(file_path)
    await bot.send_message(message.from_user.id, hcode('‚úíÔ∏è–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:'), parse_mode=types.ParseMode.HTML)
    await bot.send_message(message.from_user.id, res, reply_markup=dicts.start_but())


@dp.message_handler(Text(equals="üÉèBlackJack"))
async def start_blackjack(message: types.Message):
    await bot.send_message(message.from_user.id, '–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í BLACKJACK!')
    global dealer_hand, player_hand
    dealer_hand = blackjack.deal()
    player_hand = blackjack.deal()
    await bot.send_message(message.from_user.id, "–î–∏–ª–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç " +
                           hlink(str(dealer_hand[0]['value']), dealer_hand[0]['link']), parse_mode=types.ParseMode.HTML)
    await bot.send_message(message.from_user.id, "–£ –≤–∞—Å " + hlink(str(player_hand[0]['value']), player_hand[0]['link']) +
                           ' and ' + hlink(str(player_hand[1]['value']), player_hand[1]['link']) + " —Å —Å—É–º–º–æ–π " +
                           str(blackjack.total(player_hand)), parse_mode=types.ParseMode.HTML)
    blackjack.blackjack(dealer_hand, player_hand)
    buttons = ["‚ô•Ô∏è–í–∑—è—Ç—å", "‚ô†Ô∏è–û—Ç–∫—Ä—ã—Ç—å", "‚ùå–í—ã–π—Ç–∏"]
    await bot.send_message(message.from_user.id, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, –í–∑—è—Ç—å, –û—Ç–∫—Ä—ã—Ç—å, –∏–ª–∏ –í—ã–π—Ç–∏: ', reply_markup=dicts.buttons_keyboard(buttons))


@dp.message_handler(Text(equals=["‚ô•Ô∏è–í–∑—è—Ç—å", "‚ô†Ô∏è–û—Ç–∫—Ä—ã—Ç—å", "‚ùå–í—ã–π—Ç–∏"]))
async def play_blackjack(message: types.Message):
    if message.text == "‚ô•Ô∏è–í–∑—è—Ç—å":
        blackjack.hit(player_hand)
        while blackjack.total(dealer_hand) < 17:
            blackjack.hit(dealer_hand)
        await bot.send_message(message.from_user.id, blackjack.score(dealer_hand, player_hand), reply_markup=dicts.start_but())
    elif message.text == "‚ô†Ô∏è–û—Ç–∫—Ä—ã—Ç—å":
        while blackjack.total(dealer_hand) < 17:
            blackjack.hit(dealer_hand)
        await bot.send_message(message.from_user.id, blackjack.score(dealer_hand, player_hand), reply_markup=dicts.start_but())
    elif message.text == "‚ùå–í—ã–π—Ç–∏":
        info = '–ü–æ–∫–∞!'
        await bot.send_message(message.from_user.id, info, reply_markup=dicts.start_but())


@dp.message_handler(Text(equals="‚õÖÔ∏è–ü–æ–≥–æ–¥–∞"))
async def get_weather(message: types.Message):
    buttons = ["üá∫üá¶–£–∫—Ä–∞–∏–Ω–∞", "üá∑üá∫–†–æ—Å—Å–∏—è", "üá™üá∫–ì–æ—Ä–æ–¥–∞ –ï–≤—Ä–æ–ø—ã"]
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–≥–∏–æ–Ω.', reply_markup=dicts.buttons_keyboard(buttons))


@dp.message_handler(Text(equals=["üá∫üá¶–£–∫—Ä–∞–∏–Ω–∞", "üá∑üá∫–†–æ—Å—Å–∏—è", "üá™üá∫–ì–æ—Ä–æ–¥–∞ –ï–≤—Ä–æ–ø—ã"]))
async def choose_city(message: types.Message):
    if message.text == "üá∫üá¶–£–∫—Ä–∞–∏–Ω–∞":
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=dicts.buttons_keyboard(dicts.ua_cities))
    elif message.text == "üá∑üá∫–†–æ—Å—Å–∏—è":
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=dicts.buttons_keyboard(dicts.ru_cities))
    elif message.text == "üá™üá∫–ì–æ—Ä–æ–¥–∞ –ï–≤—Ä–æ–ø—ã":
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=dicts.buttons_keyboard(dicts.eu_cities))


@dp.message_handler(Text(equals=dicts.all_cities))
async def show_res_weather(message: types.Message):
    city_ru = message.text
    info = weather.get_weather(city_ru)
    await bot.send_message(message.from_user.id, info, parse_mode=types.ParseMode.HTML, reply_markup=dicts.start_but())


@dp.message_handler(Text(equals="üì∞–ù–æ–≤–æ—Å—Ç–∏"))
async def choose_all_news(message: types.Message):
    buttons = ["üî¨Science", "üíªTech", "üåéWorld"]
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π!', reply_markup=dicts.buttons_keyboard(buttons))


@dp.message_handler(Text(equals=["üî¨Science", "üíªTech", "üåéWorld"]))
async def get_news(message: types.Message):
    if message.text == "üî¨Science":
        all_news = news_scraper.get_news('https://www.bbc.com/news/science_and_environment')
    elif message.text == "üíªTech":
        all_news = news_scraper.get_news()
    elif message.text == "üåéWorld":
        all_news = news_scraper.get_news('https://www.bbc.com/news/world')
    i = 0
    for p in range(1, 6):
        new = all_news[i]
        i += 1
        if new['Text'] == 'No text' or new['Text'] == '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞':
            continue
        news = f"{hbold(new['Title'])}\n" \
               f"{hunderline(new['Text'])}\n" \
               f"{hlink('Read more', new['Link'])}"
        await bot.send_message(message.from_user.id, news, parse_mode=types.ParseMode.HTML, reply_markup=dicts.start_but())
        time.sleep(1)


@dp.message_handler(Text(equals="üíµ–ö—É—Ä—Å –≤–∞–ª—é—Ç"))
async def get_rates_choose(message: types.Message):
    buttons = ["USD $", "EUR ‚Ç¨", "UAH ‚Ç¥", "RUB ‚ÇΩ"]
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞–ª—é—Ç—É.', reply_markup=dicts.buttons_keyboard(buttons))


@dp.message_handler(Text(equals=["USD $", "EUR ‚Ç¨", "UAH ‚Ç¥", "RUB ‚ÇΩ"]))
async def get_rates(message: types.Message):
    result = exchange_rate.gey_rate(message.text[:message.text.find(' ')])
    await bot.send_message(message.from_user.id, result, parse_mode=types.ParseMode.HTML, reply_markup=dicts.start_but())


@dp.message_handler()
async def to_talk(message: types.Message):
    question = message.text
    response = chatbot_talk.ai_talk(question)
    await bot.send_message(message.from_user.id, response, reply_markup=dicts.start_but())


executor.start_polling(dp, skip_updates=True)
